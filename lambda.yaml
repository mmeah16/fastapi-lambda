Parameters:
  lambdaFunctionName:
    Type: String
    Default: my-lambda-function
  # apiGatewayName:
  #   Type: String
  #   Default: my-api-gateway
  # apiGatewayStageName:
  #   Type: String
  #   Default: call
  # apiGatewayHTTPMethod:
  #   Type: String
  #   Default: POST

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: serverless-fastapi-lambda-dev-079
        S3Key: aws_lambda_artifact.zip
      # Code:
      #   ZipFile: |
      #     def handler(event, context):
      #       return {
      #         'body' : 'Hello World from Lambda!',
      #         'statusCode' : 200
      #       }
      FunctionName: !Ref lambdaFunctionName
      Description: Hello world lambda function
      Handler: main.handler
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.10

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
          PolicyName: lambda

  # APIGateway:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Name: !Ref apiGatewayName
  #     Description: Initial API Gateway

  # APIGatewayMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     ResourceId: !GetAtt APIGateway.RootResourceId
  #     RestApiId: !Ref APIGateway
  #     AuthorizationType: NONE
  #     HttpMethod: POST
  #     Integration:
  #       IntegrationHttpMethod: POST
  #       Type: AWS_PROXY
  #       Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  # APIGatewayDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref APIGateway
  #     StageName: call
  #   DependsOn:
  #     - APIGatewayMethod

  # APIGatewayPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt LambdaFunction.Arn
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/
  #   DependsOn:
  #     - APIGatewayDeployment

Outputs:
  lambdaArn:
    Value: !GetAtt LambdaFunction.Arn
