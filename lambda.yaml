Parameters:
  lambdaFunctionName:
    Type: String
    Default: my-lambda-function

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: serverless-fastapi-lambda-dev-079
        S3Key: aws_lambda_artifact_v5.zip
      FunctionName: !Ref lambdaFunctionName
      Description: Hello world lambda function
      Handler: main.handler
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.10

  permissionForURLInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionUrlAuthType: "NONE"
      Action: lambda:InvokeFunctionUrl
      Principal: "*"

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: arn:aws:dynamodb:us-east-1:297552353691:table/userbase
          PolicyName: lambda

Outputs:
  lambdaArn:
    Value: !GetAtt LambdaFunction.Arn
